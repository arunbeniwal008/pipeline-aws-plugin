pipeline {
    agent any
    environment {
        git_credential = "github1"
        aws_credential = "s3-aws"
        repo_url = "https://github.com/arunbeniwal008/pipeline-aws-plugin.git"
        bucket = "aruns3jenkins"
        region = "ap-south-1"
        }
    
    tools {
        // Install the Maven version and add it to the path.
        maven "maven-3.3.9"
    }
stages {
        stage('checkout') {
            steps {
                script {
                    git branch:"${BRANCH_NAME}",
                        credentialsId: "${git_credential}",
                        url: "http://${repo_url}"
                    commitId = sh (script: 'git rev-parse --short HEAD ${GIT_COMMIT}', returnStdout: true).trim()
               }
            }
        }
        stage("Maven build"){
            steps {
                // Run Maven on a Unix agent.
                sh "mvn clean install -DskipTests=true -Dmaven.test.failure.ignore=true."
            }
        }
       
        stage("Upload"){
            steps{
                withAWS(region:"${region}", credentials:"${aws_credential}) {
                    s3Upload(file:"${TAG_NAME}", bucket:"${bucket}", path:"${TAG_NAME}/")
                }    
              }
            }
            post {
                success{
                    office365ConnectorSend message: "${notify_text}<br>commit id: ${commitId}", status:"Success Upload", webhookUrl:"${webHook_url}"
     sh "ls"
                }
                failure{
                    office365ConnectorSend message: "Fail build,<br> see (<${env.BUILD_URL}>)", status:"Fail Upload", webhookUrl:"${webHook_url}"
                }
    post {
        always {
            cleanWs()
            dir("${env.WORKSPACE}@tmp") {
              deleteDir()
            }
            dir("${env.WORKSPACE}@script") {
              deleteDir()
            }
            dir("${env.WORKSPACE}@script@tmp") {
              deleteDir()
            }
            sh "docker rmi ${base_imagename}"
            sh "docker rmi ${api_imagename}"
            sh "docker rmi ${auth_imagename}"
        }
    }
}
}
